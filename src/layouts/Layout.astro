---
import { ViewTransitions } from "astro:transitions";
import Footer from "../components/Footer.astro";
import Navigation from "../components/Navigation.astro";
import Notice from "../components/Notice.astro";
import If from "../components/utils/If.astro";
import { DATA } from "../data/data";

export interface Props {
  title: string;
  lang: string;
  description: string;
}

const { title, lang, description } = Astro.props;
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <ViewTransitions />
    <!-- Animate.css CDN -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />

    <!-- Phosphor icons CDN -->
    <link
      rel="stylesheet"
      type="text/css"
      href="https://unpkg.com/@phosphor-icons/web@2.0.3/src/regular/style.css"
    />

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <style is:global>
      @tailwind base;
      @tailwind components;
      @tailwind utilities;

      @font-face {
        font-family: "Manrope";
        src: url("/fonts/Manrope/Manrope-VariableFont_wght.ttf")
          format("truetype");
      }

      * {
        box-sizing: border-box;
        font-family: "Manrope";
      }

      .activeRoute {
        @apply text-green-400 dark:text-blue-400;
      }

      .wrapper {
        @apply md:w-8/12 md:mx-auto pt-16 pb-28 md:pt-32 md:pb-52;
      }
    </style>
  </head>
  <body
    class="bg-light-background dark:bg-dark-background text-dark-background dark:text-light-background"
  >
    <If condition={DATA.welcomeBanner.isEnabled}>
      <Notice />
    </If>
    <div class="overflow-hidden min-h-screen flex flex-col justify-between">
      <div>
        <Navigation />
        <slot />
      </div>
      <Footer />
    </div>
    <script>
      const html = document.documentElement;
      if (!!localStorage.getItem("dark")) {
        html.classList.add("dark");
      }

      const animations = [...document.querySelectorAll(".animate")];
      const callback = (
        entries: IntersectionObserverEntry[],
        observer: IntersectionObserver,
      ) => {
        entries.forEach((entry: IntersectionObserverEntry) => {
          let animationClasses = (
            entry.target.getAttribute("data-animation") ?? ""
          ).split(" ");

          if (entry.isIntersecting) {
            if (
              !entry.target.getAttribute("data-animation-repeat") &&
              entry.target.getAttribute("data-animation-repeated")
            ) {
              observer.unobserve(entry.target);
              return;
            }
            entry.target.setAttribute("data-animation-repeated", "true");
            animationClasses.forEach((className: any) => {
              entry.target.classList.add(className);
            });
            if (entry.target.classList.contains("invisible")) {
              entry.target.classList.remove("invisible");
            }
          } else if (
            !entry.isIntersecting &&
            entry.boundingClientRect.top > 0
          ) {
            animationClasses.forEach((className: any) => {
              entry.target.classList.remove(className);
            });
          }
        });
      };

      const observer = new IntersectionObserver(callback, {
        rootMargin: "200px 0px",
      });

      animations.forEach((animation) => observer.observe(animation));
    </script>
  </body>
</html>
